# Table Operations Test Suite
# Comprehensive tests for table operations: INSERT, SELECT, UPDATE, DELETE with test data

metadata:
  version: "1.0"
  description: "Comprehensive table operations with real test data"

setup:
  - action: "CREATE TABLE employees"
    sql: |
      CREATE TABLE employees (
        id INT,
        name VARCHAR(100),
        department VARCHAR(50),
        salary DECIMAL(10,2),
        age INT,
        active BOOLEAN
      )
  - action: "CREATE TABLE departments"
    sql: |
      CREATE TABLE departments (
        id INT,
        name VARCHAR(100),
        budget DECIMAL(12,2)
      )

test_cases:

  # === INSERT OPERATIONS ===
  - name: "INSERT single employee record"
    sql: "INSERT INTO employees (id, name, department, salary, age, active) VALUES (1, 'Alice Johnson', 'Engineering', 75000.00, 28, true)"
    expect:
      affected_rows: 1

  - name: "INSERT multiple employee records"
    sql: |
      INSERT INTO employees (id, name, department, salary, age, active) VALUES
      (2, 'Bob Smith', 'Marketing', 65000.00, 32, true),
      (3, 'Carol Davis', 'Engineering', 82000.00, 29, true),
      (4, 'David Wilson', 'Sales', 55000.00, 35, false),
      (5, 'Eve Brown', 'Engineering', 78000.00, 26, true)
    expect:
      affected_rows: 5

  - name: "INSERT department records"
    sql: |
      INSERT INTO departments (id, name, budget) VALUES
      (1, 'Engineering', 500000.00),
      (2, 'Marketing', 200000.00),
      (3, 'Sales', 300000.00)
    expect:
      affected_rows: 3

  - name: "INSERT with partial columns"
    sql: "INSERT INTO employees (id, name, department) VALUES (6, 'Frank Miller', 'HR')"
    expect:
      affected_rows: 1

  # === BASIC SELECT OPERATIONS ===
  - name: "SELECT all employees"
    sql: "SELECT * FROM employees"
    expect:
      rows: 6

  - name: "SELECT specific columns"
    sql: "SELECT name, department, salary FROM employees"
    expect:
      rows: 6

  - name: "SELECT with column aliases"
    sql: "SELECT name AS employee_name, salary AS monthly_salary FROM employees"
    expect:
      rows: 6

  - name: "SELECT single employee by ID"
    sql: "SELECT name, department FROM employees WHERE id = 1"
    expect:
      rows: 1
      data:
        - name: "Alice Johnson"
          department: "Engineering"

  # === WHERE CLAUSE OPERATIONS ===
  - name: "SELECT with numeric WHERE condition"
    sql: "SELECT name FROM employees WHERE salary > 70000"
    expect:
      rows: 3

  - name: "SELECT with string WHERE condition"
    sql: "SELECT name, salary FROM employees WHERE department = 'Engineering'"
    expect:
      rows: 3

  - name: "SELECT with boolean WHERE condition"
    sql: "SELECT name FROM employees WHERE active = true"
    expect:
      rows: 5

  - name: "SELECT with multiple WHERE conditions"
    sql: "SELECT name FROM employees WHERE department = 'Engineering' AND salary > 75000"
    expect:
      rows: 2

  # TODO: Add when WHERE with BETWEEN is supported
  # - name: "SELECT with BETWEEN"
  #   sql: "SELECT name FROM employees WHERE age BETWEEN 25 AND 30"
  #   expect:
  #     rows: 3

  # TODO: Add when WHERE with IN is supported  
  # - name: "SELECT with IN clause"
  #   sql: "SELECT name FROM employees WHERE department IN ('Engineering', 'Marketing')"
  #   expect:
  #     rows: 4

  # TODO: Add when LIKE patterns are supported
  # - name: "SELECT with LIKE pattern"
  #   sql: "SELECT name FROM employees WHERE name LIKE 'A%'"
  #   expect:
  #     rows: 1

  # === AGGREGATE FUNCTIONS ===
  # TODO: Add when COUNT is fully working
  # - name: "COUNT all employees"
  #   sql: "SELECT COUNT(*) AS total_employees FROM employees"
  #   expect:
  #     rows: 1
  #     data:
  #       - total_employees: 6

  # - name: "COUNT with WHERE condition"
  #   sql: "SELECT COUNT(*) AS engineering_count FROM employees WHERE department = 'Engineering'"
  #   expect:
  #     rows: 1
  #     data:
  #       - engineering_count: 3

  # - name: "SUM function"
  #   sql: "SELECT SUM(salary) AS total_salary FROM employees"
  #   expect:
  #     rows: 1

  # - name: "AVG function"
  #   sql: "SELECT AVG(salary) AS avg_salary FROM employees"
  #   expect:
  #     rows: 1

  # - name: "MAX function"
  #   sql: "SELECT MAX(salary) AS max_salary FROM employees"
  #   expect:
  #     rows: 1
  #     data:
  #       - max_salary: 82000.00

  # - name: "MIN function"
  #   sql: "SELECT MIN(salary) AS min_salary FROM employees"
  #   expect:
  #     rows: 1
  #     data:
  #       - min_salary: 55000.00

  # - name: "Multiple aggregates"
  #   sql: "SELECT COUNT(*) AS count, AVG(salary) AS avg_salary, MAX(salary) AS max_salary FROM employees"
  #   expect:
  #     rows: 1

  # === ORDER BY OPERATIONS ===
  # TODO: Add when ORDER BY is supported
  # - name: "ORDER BY salary ascending"
  #   sql: "SELECT name, salary FROM employees ORDER BY salary"
  #   expect:
  #     rows: 6
  #     data:
  #       - name: "David Wilson"
  #         salary: 55000.00

  # - name: "ORDER BY salary descending"
  #   sql: "SELECT name, salary FROM employees ORDER BY salary DESC"
  #   expect:
  #     rows: 6
  #     data:
  #       - name: "Carol Davis"
  #         salary: 82000.00

  # - name: "ORDER BY multiple columns"
  #   sql: "SELECT name, department, salary FROM employees ORDER BY department, salary DESC"
  #   expect:
  #     rows: 6

  # === UPDATE OPERATIONS ===
  - name: "UPDATE single employee salary"
    sql: "UPDATE employees SET salary = 85000.00 WHERE id = 1"
    expect:
      affected_rows: 1

  - name: "UPDATE multiple columns"
    sql: "UPDATE employees SET department = 'Senior Engineering', salary = 90000.00 WHERE id = 3"
    expect:
      affected_rows: 1

  - name: "UPDATE with expression"
    sql: "UPDATE employees SET salary = salary * 1.1 WHERE department = 'Engineering'"
    expect:
      affected_rows: 3

  - name: "UPDATE boolean field"
    sql: "UPDATE employees SET active = false WHERE id = 2"
    expect:
      affected_rows: 1

  # === DELETE OPERATIONS ===
  - name: "DELETE single employee"
    sql: "DELETE FROM employees WHERE id = 6"
    expect:
      affected_rows: 1

  - name: "DELETE with WHERE condition"
    sql: "DELETE FROM employees WHERE active = false"
    expect:
      affected_rows: 2

  - name: "Verify DELETE worked"
    sql: "SELECT COUNT(*) AS remaining FROM employees"
    expect:
      rows: 1

  # === COMPLEX SCENARIOS ===
  - name: "INSERT after DELETE"
    sql: "INSERT INTO employees (id, name, department, salary, age, active) VALUES (7, 'Grace Wilson', 'Finance', 70000.00, 31, true)"
    expect:
      affected_rows: 1

  - name: "UPDATE newly inserted record"
    sql: "UPDATE employees SET salary = 72000.00 WHERE id = 7"
    expect:
      affected_rows: 1

  - name: "SELECT with calculated columns"
    sql: "SELECT name, salary, salary * 12 AS annual_salary FROM employees WHERE id = 7"
    expect:
      rows: 1
      data:
        - name: "Grace Wilson"
          salary: 72000.00
          annual_salary: 864000.00

  # === TRANSACTION-LIKE SCENARIOS ===
  - name: "Bulk salary adjustment"
    sql: "UPDATE employees SET salary = salary + 5000 WHERE department = 'Engineering'"
    expect:
      affected_rows: 2

  - name: "Verify bulk update"
    sql: "SELECT name, salary FROM employees WHERE department = 'Engineering'"
    expect:
      rows: 2

cleanup: []