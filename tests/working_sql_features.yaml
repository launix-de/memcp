# Working SQL Features Test Suite
# Tests for SQL functionality that is confirmed to work in the parser

metadata:
  version: "1.0"
  description: "Test suite for verified working SQL features"
  database: "working_test_db"

setup:
  - action: "CREATE DATABASE"
    sql: "CREATE DATABASE working_test_db"
    
test_cases:

  # === ARITHMETIC EXPRESSIONS (WORKING) ===
  - name: "Basic arithmetic - addition"
    sql: "SELECT 5 + 3 AS result"
    expect:
      rows: 1
      data:
        - result: 8

  - name: "Basic arithmetic - subtraction"
    sql: "SELECT 10 - 4 AS result"
    expect:
      rows: 1
      data:
        - result: 6

  - name: "Basic arithmetic - multiplication"
    sql: "SELECT 6 * 7 AS result"
    expect:
      rows: 1
      data:
        - result: 42

  - name: "Basic arithmetic - division"
    sql: "SELECT 15 / 3 AS result"
    expect:
      rows: 1
      data:
        - result: 5

  - name: "Complex arithmetic expression"
    sql: "SELECT (10 + 5) * 2 - 8 / 4 AS result"
    expect:
      rows: 1
      data:
        - result: 28

  # === COMPARISON OPERATORS (WORKING) ===
  - name: "Comparison - greater than"
    sql: "SELECT 10 > 5 AS result"
    expect:
      rows: 1
      data:
        - result: true

  - name: "Comparison - less than"
    sql: "SELECT 3 < 8 AS result"
    expect:
      rows: 1
      data:
        - result: true

  - name: "Comparison - greater or equal"
    sql: "SELECT 5 >= 5 AS result"
    expect:
      rows: 1
      data:
        - result: true

  - name: "Comparison - less or equal"
    sql: "SELECT 4 <= 7 AS result"
    expect:
      rows: 1
      data:
        - result: true

  # === STRING FUNCTIONS (WORKING) ===
  - name: "String function - UPPER"
    sql: "SELECT UPPER('hello world') AS result"
    expect:
      rows: 1
      data:
        - result: "HELLO WORLD"

  - name: "String function - LOWER"
    sql: "SELECT LOWER('HELLO WORLD') AS result"
    expect:
      rows: 1
      data:
        - result: "hello world"

  # === MATH FUNCTIONS (WORKING) ===
  - name: "Math function - FLOOR"
    sql: "SELECT FLOOR(4.7) AS result"
    expect:
      rows: 1
      data:
        - result: 4

  - name: "Math function - CEIL"
    sql: "SELECT CEIL(4.3) AS result"
    expect:
      rows: 1
      data:
        - result: 5

  - name: "Math function - CEILING"
    sql: "SELECT CEILING(4.3) AS result"
    expect:
      rows: 1
      data:
        - result: 5

  - name: "Math function - ROUND"
    sql: "SELECT ROUND(4.6) AS result"
    expect:
      rows: 1
      data:
        - result: 5

  # === TIME FUNCTIONS (WORKING) ===
  - name: "Time function - UNIX_TIMESTAMP exists"
    sql: "SELECT UNIX_TIMESTAMP() > 1600000000 AS recent_timestamp"
    expect:
      rows: 1
      data:
        - recent_timestamp: true

  - name: "Time function - CURRENT_TIMESTAMP exists" 
    sql: "SELECT CURRENT_TIMESTAMP() > 1600000000 AS recent_timestamp"
    expect:
      rows: 1
      data:
        - recent_timestamp: true

  # === SHOW COMMANDS (WORKING) ===
  - name: "SHOW DATABASES"
    sql: "SHOW DATABASES"
    expect: {}  # Environment dependent, just check it runs

  - name: "SHOW VARIABLES"
    sql: "SHOW VARIABLES"
    expect: {}  # Environment dependent, just check it runs

  # === LITERALS AND CONSTANTS (WORKING) ===
  - name: "Integer literal"
    sql: "SELECT 42 AS number"
    expect:
      rows: 1
      data:
        - number: 42

  - name: "Negative integer"
    sql: "SELECT -17 AS number"
    expect:
      rows: 1
      data:
        - number: -17

  - name: "Float literal"
    sql: "SELECT 3.14159 AS pi"
    expect:
      rows: 1
      data:
        - pi: 3.14159

  - name: "String literal with single quotes"
    sql: "SELECT 'Hello World' AS message"
    expect:
      rows: 1
      data:
        - message: "Hello World"

  - name: "String literal with double quotes"
    sql: "SELECT \"Hello World\" AS message"
    expect:
      rows: 1
      data:
        - message: "Hello World"

  # === MULTIPLE COLUMNS (WORKING) ===
  - name: "Multiple column expressions"
    sql: "SELECT 1 + 2 AS sum, 3 * 4 AS product, 'test' AS text"
    expect:
      rows: 1
      data:
        - sum: 3
          product: 12
          text: "test"

  # === CASE EXPRESSIONS (WORKING) ===
  - name: "Simple CASE expression"
    sql: "SELECT CASE WHEN 5 > 3 THEN 'greater' ELSE 'lesser' END AS result"
    expect:
      rows: 1
      data:
        - result: "greater"

  - name: "CASE with multiple WHEN clauses"
    sql: "SELECT CASE WHEN 2 > 5 THEN 'big' WHEN 2 > 1 THEN 'medium' ELSE 'small' END AS result"
    expect:
      rows: 1
      data:
        - result: "medium"

  # === SET SESSION (WORKING) ===
  - name: "SET session variable"
    sql: "SET @test_var = 'hello'"
    expect: {}  # Session variables return the assigned value, not affected_rows

  - name: "SET session variable with SESSION keyword"
    sql: "SET SESSION @another_var = 42"
    expect: {}  # Session variables return the assigned value, not affected_rows

  # === ERROR CASES (WORKING ERROR HANDLING) ===
  - name: "Unknown function error"
    sql: "SELECT UNKNOWN_FUNCTION(1) AS result"
    expect:
      error: true
      error_type: "unknown_function"

  - name: "Invalid syntax error"
    sql: "INVALID SQL STATEMENT"
    expect:
      error: true
      error_type: "syntax_error"

  # === TODO: Features that should work but might have issues ===
  
  # TODO: Test when basic table operations are stable
  # - name: "Simple table creation"
  #   sql: "CREATE TABLE simple_test (id INT, name VARCHAR(50))" 
  #   expect:
  #     affected_rows: 1

  # TODO: Test when INSERT works properly  
  # - name: "Basic INSERT"
  #   sql: "INSERT INTO simple_test (id, name) VALUES (1, 'test')"
  #   expect:
  #     affected_rows: 1

  # TODO: Test when basic SELECT from tables works
  # - name: "Basic SELECT from table"
  #   sql: "SELECT * FROM simple_test"
  #   expect:
  #     rows: 1

  # TODO: Test aggregates when table operations are stable
  # - name: "COUNT(*) function"
  #   sql: "SELECT COUNT(*) AS total FROM simple_test"
  #   expect:
  #     rows: 1

  # TODO: Test when WHERE clauses work properly
  # - name: "WHERE with simple condition"
  #   sql: "SELECT * FROM simple_test WHERE id = 1"
  #   expect:
  #     rows: 1

cleanup:
  - action: "DROP DATABASE"
    sql: "DROP DATABASE working_test_db"