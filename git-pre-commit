#!/bin/bash
#
# MemCP Pre-commit Hook
# Runs SQL tests before allowing commits using a single MemCP instance
#

echo "🔍 Running MemCP pre-commit tests..."

# Build memcp to ensure latest changes are included
echo "🔨 Building memcp..."
if ! go build -o memcp; then
    echo "❌ Build failed, commit aborted"
    exit 1
fi

# Find all numbered test files (01_*.yaml, 02_*.yaml, etc.)
test_files=$(find tests/ -name "[0-9][0-9]_*.yaml" | sort)

if [ -z "$test_files" ]; then
    echo "❌ No test files found in tests/ directory"
    exit 1
fi

echo "Found test files:"
echo "$test_files"
echo ""

test_port=4400
run_memcp_forever() {
  while true; do
    echo "🚀 (re)Starting MemCP on port $test_port..."
    pkill -f "memcp.*--api-port=$test_port" || true
    sleep 1
    ./memcp -data "/tmp/memcp-pre-commit-tests" --api-port=$test_port --mysql-port=$((test_port + 1000)) --disable-mysql lib/main.scm < "$fifo_path" >> /tmp/memcp-test.log 2>&1 &
    memcp_pid=$!
    # wait for process to exit; test loop will poll readiness
    wait $memcp_pid
    echo "⚠️  MemCP exited (code=$?). Restarting..."
    sleep 0.5
  done
}

# Prepare data dir and logfile once outside the loop
rm -rf /tmp/memcp-pre-commit-tests || true
echo -n > /tmp/memcp-test.log

# Create FIFO to keep stdin open across restarts
fifo_path="/tmp/memcp-stdin-$test_port"
rm -f "$fifo_path" 2>/dev/null || true
mkfifo "$fifo_path"
# Keep writer end open for the lifetime of this script
exec 3<> "$fifo_path"

# Start supervisor loop
run_memcp_forever &
supervisor_pid=$!

# Wait until ready once
echo "⏳ Waiting for MemCP to be ready..."
for i in {1..60}; do
  if curl -s "http://localhost:$test_port" >/dev/null 2>&1; then
    echo "✅ MemCP is ready!"
    break
  fi
  sleep 1
done

cleanup() {
  echo ""; echo "🛑 Stopping MemCP..."
  kill $supervisor_pid 2>/dev/null || true
  # Also kill an active memcp if still running
  pkill -f "memcp.*--api-port=$test_port" 2>/dev/null || true
  # Close and remove FIFO
  exec 3>&-
  rm -f "$fifo_path" 2>/dev/null || true
  echo "✅ MemCP stopped"
}
trap cleanup EXIT

echo "🧪 Running SQL tests using single MemCP instance..."

# Run each test file using --connect-only mode
all_passed=true
failed_files=""

for test_file in $test_files; do
    echo "🔍 Running $test_file..."
    # Ensure server is responsive before each file
    for i in {1..30}; do
      if curl -s "http://localhost:$test_port" >/dev/null 2>&1; then
        break
      fi
      sleep 1
    done
    if python3 run_sql_tests.py "$test_file" $test_port --connect-only; then
        echo "✅ Tests in $test_file passed"
    else
        echo "❌ Tests in $test_file failed"
        all_passed=false
        failed_files="$failed_files $test_file"
    fi
    echo ""
done

if [ "$all_passed" = true ]; then
    echo "🎉 All tests passed, commit allowed"
    exit 0
else
    echo "❌ Some tests failed, commit aborted"
    echo ""
    echo "Failed test files:$failed_files"
    echo ""
    echo "You can run individual test files manually with:"
    echo "  python3 run_sql_tests.py <test_file.yaml> $test_port --connect-only"
    echo "  (Make sure to start MemCP first: ./memcp --api-port=$test_port --disable-mysql)"
    exit 1
fi
